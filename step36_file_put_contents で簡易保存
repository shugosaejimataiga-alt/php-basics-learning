了解しました。
では Step36：「file_put_contents で簡易保存」 を始めましょう。


🎯 学習目的
file_put_contents() は、最も簡単にファイルへデータを書き込む方法です。
従来の fopen()・fwrite()・fclose() の3ステップを、たった1行で置き換えられます。



✅ 意義とメリット

短いコードで同じ処理が可能
自動でファイルを開閉してくれる
上書きモード／追記モードの切り替えも簡単
ログ記録や掲示板アプリなどで頻繁に使う

実務でもログや簡易ストレージとして多用されるため、確実に理解する価値があります。


🧱 基本例（例文コード）
📄 step36_basic.php
<?php

$text = "こんにちは、PHP学習中です！";

// ファイルに書き込む（上書きモード）
file_put_contents("message.txt", $text);

echo "書き込みが完了しました。\n";
?>

🔍 解説

file_put_contents("ファイル名", "内容")
→ 指定したファイルに文字列を書き込みます。

同名ファイルが存在しない場合、自動で作成されます。

既にある場合、内容を上書きします。



🧩 練習問題①
次のように書き込みを行うコードを作成してください。
📄 step36_practice1.php
条件

変数 $data に "PHPの学習を頑張っています！" を代入
ファイル名は log.txt
file_put_contents() を使って書き込み
終了後に "書き込み成功！" を表示

あなたのコードをここに貼ってください。
（私が正誤と理由を解説します）

<?php

$data = "PHPの学習を頑張っています！";

file_put_contents("log.txt", $data);

echo "書き込み成功！";

?>

✅ 完璧です。正しく書けています。

🔍 良いポイント

$data に書き込む文字を代入 → OK

file_put_contents("log.txt", $data) → 上書き保存として正しく実行

echo で処理完了を通知 → OK

ファイルの開閉処理が内部で自動化され、意図どおりのシンプルな書き方になっています。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

では次の理解ステップへ進みます。
📝 重要な追加知識：追記モード（上書きじゃなくて後ろに追加する）

file_put_contents() はデフォルトだと 上書きします。
しかし、追記したい場合は、第3引数に FILE_APPEND を指定します。

例：
file_put_contents("log.txt", $data, FILE_APPEND);

これは ログ記録 や 掲示板 などで必須です。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

🧩 練習問題②（追記モード）

📄 step36_practice2.php を作ってください。

条件

$msg に "今日も学習を続けています。\n" を代入

log.txt に 追記モード（FILE_APPEND） で追加する

終了後に "追記しました！" と表示する


<?php

$msg = "今日も学習を続けています。\n";

file_put_contents("log.txt", $msg, FILE_APPEND);

echo "追記しました！";

?>

✅ とても良いです。正しく書けています。


🔍 解説（表形式ではなく、端的で本質的に）

1. $msg = "〜\n";

\n は「改行」です。
追記する時に前回の文字列とつながらないように、
行を区切るために必要です。

2. file_put_contents("log.txt", $msg, FILE_APPEND);

ここが今回の学習の核心です。
file_put_contents() は本来「上書き保存」
FILE_APPEND を指定すると「後ろに追加」になる

つまり：
上書きしたいとき → 第3引数なし
追記したいとき → 第3引数に FILE_APPEND

この違いを理解できれば、
ログ・掲示板・メモ書きなど“記録系アプリ”が作れるようになります。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

🎯 次の理解チェック（最終テスト）

ファイルに 日時 + メッセージ を追記する処理を作ってください。

📄 step36_final.php

条件

$message = "学習ログ" とする

$date に date("Y-m-d H:i:s") を入れる

$text に "{$date} : {$message}\n" という形式で文字列を作る

history.txt に 追記モード で保存する

"記録しました" と表示


<?php

$message = "学習ログ";

$date = date("Y-m-d H:i:s");

$text = $date . " : " . $message . "\n";

file_put_contents("history.txt", $text, FILE_APPEND);

echo "記録しました\n";

?>

✅ 合格です。とても正しく書けています。

🔍 解説（端的に・本質だけ）

1. date("Y-m-d H:i:s")

現在時刻を「年-月-日 時:分:秒」形式で取得
ログは「いつ」が重要なので日時を入れるのは実務的に正しいです。


2. $text = $date . " : " . $message . "\n";

文字列を 結合 して、1行の記録形式にしています。

\n で「次の追記が別の行になる」
→ これがないとログが一行に連結されて読めなくなるので重要。


3. file_put_contents("history.txt", $text, FILE_APPEND);

FILE_APPEND で追記モード
過去の履歴を消さない → ログとして正しい使い方

完全に理解できています。



🧠 ここで身についた本質

あなたは今：
ファイルへの記録処理
ログ形式の理解
追記と上書きの違い
を自力で実装できています。

これは 掲示板アプリ（ステップ37）を作るために必要なスキルです。
つまり、もう 次のステップに進める状態 です。


🎉 Step36 完了

次は Step37：簡単な掲示板風アプリ に進みます。
Step37 でやること

フォームからメッセージを受け取る

file_put_contents() で保存

保存された内容を file() または file_get_contents() で表示する

「入力 → 保存 → 表示」 の基本サイクルを作ることで、
Webアプリの動作の流れが 本質的に理解できるようになります。