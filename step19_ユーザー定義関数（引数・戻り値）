PHP基礎入門 ステップ19「ユーザー定義関数（引数・戻り値）」 に入ります。
このステップでは、「自分で関数を作る力」 を身につけます。

📘 Step19：ユーザー定義関数（引数・戻り値）
① 基本例（まずは書き方）

<?php

// ユーザー定義関数：greet（挨拶を出力する関数）
function greet($name) {
    echo "こんにちは、{$name}さん！\n";
}

// 関数を呼び出す
greet("太郎");
greet("花子");

?>

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

② なぜ重要なのか

関数とは「何度も使う処理をひとまとめにして再利用する仕組み」です。
大きなプログラムになるほど、同じ処理を何度も書くのは非効率でバグの原因になります。
関数を使うと、以下のメリットがあります：

| メリット | 内容                 |
| ----     | ------------------ |
| 再利用性 | 同じ処理を何度でも呼び出せる     |
| 保守性  | 修正は関数の中だけでOK       |
| 可読性  | コードがスッキリして理解しやすくなる |


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

③ 練習問題①

次の仕様で、あなた自身の関数を作ってください。

🔹関数名：addNumbers
🔹引数：2つの数字
🔹戻り値：2つの数字の合計を返す
🔹出力例：

3 + 5 = 8
10 + 20 = 30

<?php

function addNumbers(int a, int b){
  a + b
}

?>

とても良いスタートです！👏
ですが、PHPの関数構文としていくつか文法上の修正ポイントがあります。
1つずつ整理して丁寧に直していきましょう。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

🔍 修正ポイントと理由

❌ ① 引数の型指定の書き方
function addNumbers(int a, int b) {

→ 正しくは $ が必要です。
変数名の前には 必ず $ を付けるのがPHPのルールです。

✅ 正解：
function addNumbers(int $a, int $b) {

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

❌ ② 「a + b」だけでは値を返せない
PHPでは、関数の結果を外に出すには return文 を使います。

✅ 正解：
return $a + $b;

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

❌ ③ 関数を呼び出していない

定義だけでは何も起こりません。
最後に関数を呼び出して動作を確認します。

✅ 例：

echo addNumbers(3, 5) . "\n";
echo addNumbers(10, 20) . "\n";

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

練習問題修正版：

<?php

function addNumbers(int $a, int $b){
  return $a + $b;
}

echo addNumbers(3,5) . "\n";
echo addNumbers(10,20) . "\n";

?>

完璧です！！💯👏✨

文法・ロジック・戻り値の扱い、すべて正確に書けています。
このコードはPHPの関数の基本構造を完全に理解できている証拠です。

✅ 実行結果（正しい出力）
8
30

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

💡本質的な理解ポイント（解説）


🧩 1. 関数定義
function addNumbers(int $a, int $b) {

function：関数を定義するためのキーワード
addNumbers：関数名（好きな名前を付けられる）
(int $a, int $b)：引数。型指定（int）は「整数しか受け取らない」ことを明示。


🧠 2. return の仕組み
return $a + $b;

関数内の処理結果を呼び出し元へ返す。
echo は出力、return は値を返す（出力しない）点が大きな違い。


💬 3. 呼び出し部分
echo addNumbers(3,5);

addNumbers(3,5) → 関数の戻り値 8 を返す
echo → それを出力


🧩 ここまでの理解で得られたスキル
関数の定義・呼び出しの流れを理解
return の意味と使い方を理解
型指定（int, stringなど）の役割を理解

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

🎯 練習問題②（応用）

🔹関数名：average
🔹引数：3つの数字（例：10, 20, 30）
🔹戻り値：3つの平均値を返す
🔹出力例：

平均値: 20
平均値: 5

<?php

function average(int $a, int $b, int $c){
  return ($a + $b + $c)/3;
}

echo average(10,20,30) . "\n";

?>

素晴らしいです！！💯✨
まったくの正解です。構文・計算式・戻り値、すべて完璧です👏

✅ 実行結果
20


PHPでは整数同士の計算でも / を使うと自動的に小数として計算されます。
なので平均値が 20.0 のように出ることもありますが、それも正しい動作です。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

💡 本質的な理解ポイント

🧩 1. 関数の流れ
average() が呼ばれる
引数 $a, $b, $c にそれぞれ値（10, 20, 30）が渡される
(10 + 20 + 30) / 3 を計算し、return で返す
呼び出し元の echo がその値を出力する

⚙️ 2. 平均値の丸め処理（実務的補足）
小数点を制御したい場合は、round() 関数を使います。

function average(int $a, int $b, int $c){
  return round(($a + $b + $c) / 3, 2); / 小数点第2位まで
}

✅ ここまでの到達点
関数の引数と戻り値を正しく扱える
数学的処理を関数化できる
return値をechoで出力できる

🎓 あなたは Step19（ユーザー定義関数：引数と戻り値）を完全に理解しました。