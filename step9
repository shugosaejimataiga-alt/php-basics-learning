では Step9「インデックス配列」 を一緒にやりましょう。

Step9：インデックス配列

① 目的
複数の値を 1つの変数にまとめる 方法を理解する
配列（Array）の基本構造を学ぶ
配列の要素を 添字（インデックス番号） を使って取り出す

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
② 基本の書き方（例）

<?php
// step9_array.php

// インデックス配列の作成
$fruits = ["apple", "banana", "orange"];

// 配列の要素を出力
echo $fruits[0]; apple
echo "\n";
echo $fruits[1]; banana
echo "\n";
echo $fruits[2]; orange
echo "\n";

// 配列全体を確認
var_dump($fruits);
?>


📌 ポイント
配列は [] または array() で作れる
要素は 0から始まる番号（インデックス番号）で指定
var_dump() を使うと「中身＋型＋要素数」が確認できる
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

③ 練習問題（あなたに解いてもらう）
👉 次の指示に従ってコードを書いてください。

ファイル名：step9_animals.php
インデックス配列 $animals を作成し、要素に "dog", "cat", "bird" を入れる
$animals[0] と $animals[2] を echo で出力する
最後に var_dump($animals); を出力する

<?php

$animals = ["dog", "cat", "bird"];

echo $animals[0];
echo "\n";
echo $animals[2];
echo "\n";

var_dump ($animals);
?>

💯 完璧です！
✅ チェック結果
配列 $animals を ["dog", "cat", "bird"] で作成 → 正しい
$animals[0] で "dog" を出力 → 正しい
$animals[2] で "bird" を出力 → 正しい
var_dump($animals); で配列の中身を確認 → 正しい

実行するとこうなります：

dog
bird
array(3) {
  [0]=>
  string(3) "dog"
  [1]=>
  string(3) "cat"
  [2]=>
  string(4) "bird"
}

補足解説（本質）
配列は 「複数の値を1つにまとめるデータ型」
インデックスは 0から始まる（dog が0番目、cat が1番目…）
PHPでは 数値インデックスでアクセスするのが「インデックス配列」
var_dump() を使うと「要素数・インデックス番号・値・型」が全部見える

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

数値インデックスでアクセスとは？

配列の要素は「順番ごとに番号」がついています。
その番号を インデックス と呼びます。
例えば：

$fruits = ["apple", "banana", "orange"];

内部的にはこうなっています：

[0] => "apple"
[1] => "banana"
[2] => "orange"


つまり、
$fruits[0] → "apple"
$fruits[1] → "banana"
$fruits[2] → "orange"

👉 このように 整数（0,1,2...）で指定して取り出すこと を「数値インデックスでアクセス」と呼びます。

数値インデックスでアクセス → 配列の要素を番号（0,1,2…）で呼び出すこと
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

次の練習問題（応用）
ファイル名：step9_numbers.php
$numbers という配列を作成し、要素に 10, 20, 30, 40, 50 を入れる
$numbers[1] と $numbers[4] を echo で出力する
var_dump($numbers); で配列の中身を確認する

👉 これを書いて実行してみてください。

<?php

$numbers = [10, 20, 30, 40, 50];

echo $numbers[1];
echo "\n";
echo $numbers[4];
echo "\n";

var_dump ($numbers);
?>

👌 いいですね！これも正解です。
✅ チェック結果
$numbers = [10, 20, 30, 40, 50]; → 配列を正しく作成できています
$numbers[1] → 20 を出力 → 正しい
$numbers[4] → 50 を出力 → 正しい
var_dump($numbers); で配列の中身を確認 → 正しい

実行結果イメージ：

20
50
array(5) {
  [0]=>
  int(10)
  [1]=>
  int(20)
  [2]=>
  int(30)
  [3]=>
  int(40)
  [4]=>
  int(50)
}

補足解説（本質）
PHPの配列は「動的配列」なので、要素数を事前に決めなくてもOK。
インデックス配列は「整数キー」で自動的に0から割り当てられる。
var_dump() は型まで確認できるので、数字が int で扱われているのが分かります。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

動的配列とは？

「動的(dynamic)」＝プログラムの実行中に自由に増減できる、という意味です。
PHPでは、配列を作った後でも 新しい要素を追加したり、削除したり できます。
例：

$numbers = [10, 20];
$numbers[] = 30;   配列の末尾に追加
unset($numbers[1]); インデックス1の要素を削除

結果：

array(2) {
  [0] => int(10)
  [2] => int(30)   // 自動で2番目に追加された
}

👉 PHPでは「配列サイズを事前に固定しなくてもいい」という意味で「動的配列」と呼びます。
（CやJavaでは「固定長配列」があり、最初に要素数を決める必要がありますが、PHPでは不要です）
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

インデックス配列は「整数キー」とは？

PHPの配列は「キーと値の組み合わせ」で成り立っています。
インデックス配列の場合、キーが自動的に整数（0から始まる番号） になります。
つまり：

$colors = ["red", "green", "blue"];

内部的には：

array(
  0 => "red",
  1 => "green",
  2 => "blue"
)

👉 この 0, 1, 2 が 整数キー。
👉 "red", "green", "blue" が 値。

（後で学ぶ「連想配列」では、キーに文字列が使われます。例：["apple" => 100, "orange" => 80]）

動的配列 → 実行中にサイズを決めなくても自由に増やせる配列

整数キー → インデックス配列の内部では「0,1,2...」という整数がキーになっている

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
疑問：
Javaって固定長配列でしたっけ？

ChatGPT:
はい、その通りです 👍

🔹 Javaの配列は「固定長配列」
Javaの配列は「長さが最初に決まる」＝固定長配列 です。
一度作成すると、そのサイズは変更できません。

例：

public class Main {
    public static void main(String[] args) {
        int[] numbers = new int[3]; 要素数3の配列を作成
        numbers[0] = 10;
        numbers[1] = 20;
        numbers[2] = 30;

        // numbers[3] = 40; ← エラー（範囲外）
        System.out.println(numbers[1]); 20
    }
}

📌 ポイント
new int[3] のように「要素数」を決めて作成する必要がある
途中で「要素数を増やす」「減らす」はできない


🔹 PHPの配列との違い
PHPでは動的配列なので、後から追加・削除できます。

<?php
$numbers = [10, 20, 30];
$numbers[] = 40; 末尾に追加できる
unset($numbers[1]); 要素を削除できる
var_dump($numbers);
?>

実行結果：

array(3) {
  [0]=> int(10)
  [2]=> int(30)
  [3]=> int(40)
}

👉 PHPは 柔軟性重視（スクリプト言語でWebに強い）
👉 Javaは 厳格性重視（型安全・効率重視）


🔹 余談（Javaで動的配列を使いたい場合）
Javaでは「ArrayList クラス」を使います。
ArrayList は可変長で、PHPの配列に近い動きをします。

import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(10);
        list.add(20);
        list.add(30);
        list.add(40); 自由に追加できる
        System.out.println(list); [10, 20, 30, 40]
    }
}

👉 まとめると：
Javaの配列 → 固定長
JavaのArrayList → 動的配列（PHPの配列に近い）
PHPの配列 → 最初から動的配列

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

📘 Step9 最終テスト

ファイル名：step9_test.php

問題
$colors という配列を作り、要素に "red", "green", "blue", "yellow" を入れる
$colors[0] と $colors[3] を出力する
配列 $colors 全体を var_dump() で確認する
さらに $colors[1] を "pink" に書き換えて、もう一度 var_dump($colors); を出力する

👉 これをやれば「インデックス配列は完全理解！」と認定します。

<?php

$colors = ["red", "green", "blue", "yellow"];

echo $colors[0];
echo "\n";
echo $colors[3];

var_dump($colors);

$colors[] = "pink";

var_dump($colors);
?>

✨ とても良いです！ただし、課題でお願いした部分と少し違いがありました。
チェックして整理しますね。

✅ チェック結果

$colors = ["red", "green", "blue", "yellow"];
　→ OK（正しくインデックス配列を作れています）

$colors[0] と $colors[3] を出力
　→ OK（red と yellow が表示されます）

var_dump($colors);
　→ OK（配列全体が表示されます）

課題では $colors[1] を "pink" に書き換える指示でしたが、
　あなたのコードでは $colors[] = "pink"; と書いて 新しい要素を追加 しています。

　結果として、要素 "green" はそのままで、末尾に "pink" が追加されました。

💡 補足

$colors[1] = "pink";
　👉 既存の要素を書き換える（green → pink）

$colors[] = "pink";
　👉 新しい要素を末尾に追加する（今回のあなたのコード）
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
最終問題修正版：

<?php

$colors = ["red", "green", "blue", "yellow"];

echo $colors[0];
echo "\n";
echo $colors[3];

var_dump($colors);

$colors[1] = "pink";

var_dump($colors);

?>
👏 完璧です！今度は課題通りにできました。

✅ チェック結果
$colors = ["red", "green", "blue", "yellow"];
→ 正しい（インデックス配列を作成）

$colors[0] と $colors[3] を出力
→ "red" と "yellow" が表示される

var_dump($colors);
→ 配列全体が出力される

$colors[1] = "pink";
→ インデックス1の "green" を "pink" に上書きできている

再度 var_dump($colors);
→ 要素が書き換わったことを確認できる

🖥 実行結果イメージ
red
yellow
array(4) {
  [0]=>
  string(3) "red"
  [1]=>
  string(5) "green"
  [2]=>
  string(4) "blue"
  [3]=>
  string(6) "yellow"
}
array(4) {
  [0]=>
  string(3) "red"
  [1]=>
  string(4) "pink"
  [2]=>
  string(4) "blue"
  [3]=>
  string(6) "yellow"
}

💡 本質的な理解
$colors[] = "pink"; → 新しい要素を末尾に追加
$colors[1] = "pink"; → 既存のインデックス1の値を上書き
👉 つまり「[] は追加」「[番号] は上書き」と覚えると整理できます。

🎉 Step9（インデックス配列）まとめ
インデックス配列は「整数キー（0から始まる番号）」で管理される
PHPの配列は 動的配列 なので、後から追加も上書きも削除もできる
var_dump() を使えば、インデックスと値の対応関係が明確に見える

これで Step9：インデックス配列は合格 です 💮