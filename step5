📝 Step5：変数の宣言と代入

①目的
PHPで「値を一時的に保存」して「再利用する」ために変数を使います。
変数はプログラムの基本であり、今後の学習の土台になります。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

②手順
C:\php-basics-learning フォルダに step5_variable.php を作成
次のサンプルコードを記述してください

<?php
// 変数の宣言と代入の例

// 文字列の変数
$name = "Taro";

// 数値の変数（整数）
$age = 20;

// 数値の変数（小数）
$height = 170.5;

// 論理値の変数
$isStudent = true;

// 変数の出力
echo "名前: " . $name . "<br>";
echo "年齢: " . $age . "<br>";
echo "身長: " . $height . "cm<br>";
echo "学生ですか？: " . $isStudent . "<br>";
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

③チェックリスト
$name, $age, $height, $isStudent の変数を宣言できたか
文字列・整数・小数・論理値を代入できたか
echo で出力し、ブラウザに表示されたか
変数名は $（ドルマーク） から始まっているか

💡 補足：
PHPの変数名は $ + 英字で始める（例：$name, $age）
数字から始めるのは不可（例：$1name ❌）
大文字・小文字は区別される（$Name と $name は別物）
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

④次の一手
変数の中身を変えて、再度 echo で出力してみましょう。
例：$age = 25; に変更すると、年齢が「25」に変わります。

👉 コンテナで実行コマンド例
docker exec -it laravel_app php /var/www/html/step5_variable.php


ここまで進めて、実行結果を確認できたら「できました」と教えてください。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

🔎 ご質問1：var_dump() は使わないの？
Step5の目的は「変数を宣言して代入し、echoで出力できるようになる」こと です。
var_dump() は Step4（型確認） で学んだ関数で、「値」と「型」を同時に確認する時に使います。
👉 なので Step5 の課題には含まれていませんが、応用としてこんなふうに混ぜても良いです：

var_dump($name);
var_dump($age);
var_dump($height);
var_dump($isStudent);

これを実行すると、型（string, int, float, bool）と値が一緒に表示されます。
「型まで確認したいときは var_dump()、見やすく整形して表示したいときは echo」という使い分けです。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

🔎 ご質問2：echo "名前: " . $name . "<br>"; の意味
このコードを分解するとこうなります👇

① echo
文字列や変数をブラウザに出力する命令。
HTMLに直接書いたのと同じようにブラウザに表示されます。

② "名前: "
ダブルクォーテーションで囲まれた 文字列リテラル。
出力されるとそのまま「名前: 」と表示されます。

③ " . $name . "
. は 文字列連結演算子 です。
"名前: " と変数 $name をつなげています。
$name の中身が "Taro" なら、「名前: Taro」と表示されます。

④ "<br>"
HTMLの改行タグです。
これがないと全部1行に続いて表示されてしまいます。
つまり "名前: Taro<br>" とすることで、改行されて次の出力が見やすくなる。

🔎 出力の解説（今回の例）
echo "名前: " . $name . "<br>";
echo "年齢: " . $age . "<br>";
echo "身長: " . $height . "cm<br>";
echo "学生ですか？: " . $isStudent . "<br>";

実際の出力結果
名前: Taro
年齢: 20
身長: 170.5cm
学生ですか？: 1


名前: と $name の内容「Taro」がつながって表示される
年齢: と $age の内容「20」が表示される
身長: と $height の内容「170.5」に「cm」をくっつけて表示
学生ですか？: のあとに $isStudent（true）が表示される
PHPでは true を echo すると「1」と表示される仕様になっています
💡もし「true/false」と文字で出したい場合は var_export($isStudent, true); を使うか、自分で条件分岐して出力します。

✅ まとめると：
echo → 値を見やすく表示する（ブラウザに文字を送るイメージ）
"." → 文字列や変数をつなげる
"<br>" → HTMLの改行タグで、次の出力を見やすくする
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

<?php

$name = "Taro";

$age = 70;

$height = 120.9;

$isStudent = true;

echo "名前: " . $name . PHP_EOL;
echo "年齢: " . $age . PHP_EOL;
echo "身長: " . $height . "cm" . PHP_EOL;
echo "学生ですか？: " . $isStudent . PHP_EOL;

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

✅ Step4：var_dump() で型を確認
目的：変数に入っている「値」と「型」を確認できるようになる

やっていること：
すでに用意した変数を var_dump($変数) で出力
「これは int 型だ」「これは string 型だ」と確認
学習のゴール：
→ PHP には「型」があることを理解し、デバッグ時に使えるツールを覚えること。

📌 例：
$intVar = 42;
var_dump($intVar); int(42)



✅ Step5：変数の宣言と代入
目的：そもそも「変数とは何か」「どうやって作るか」を理解する
やっていること：
変数を宣言して、値を代入する
$name = "Taro"; のように 新しい入れ物を作って値を入れる練習
学習のゴール：
→ 自分で変数を作れるようになること。

📌 例：
$name = "Taro";
$age = 20;
echo "名前: $name, 年齢: $age";

🔑 違いをまとめると
Step4 は「すでにある変数を調べる」練習
Step5 は「自分で変数を作る」練習
つまり順序としては：
Step5 で「変数を宣言・代入」して変数を作る
Step4 で「その変数を var_dump() で調べる」
👉 本当は Step5 → Step4 の順でも学習できます。