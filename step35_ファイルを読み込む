今回は Step35：「ファイルを読み込む」 ですね。
Docker 環境で動作確認できるように、1つずつ丁寧に進めましょう。

🧩 Step35：ファイルを読み込む
① 目的と学ぶ意義

このステップでは、PHPでファイルの中身を読み取る方法を学びます。
PHPはWebだけでなく、ログの解析やデータの保存にも使われます。
つまり、**「ファイルを読み取れる＝他のプログラムやユーザーの入力を活用できる」**という力になります。

例えば：
掲示板で投稿を保存・再表示
ECサイトで在庫データを読み込み表示
ログファイルを解析して管理画面に出す

これらすべて「ファイルを開いて中身を読む」動作が基礎になります。



② 基本の書き方（例文コード）

📄 step35_readfile.php

<?php

// 読み込むファイル名を指定
$filename = "message.txt";

// ファイルが存在するか確認
if (file_exists($filename)) {
  // ファイルを開く（読み取り専用モード）
  $file = fopen($filename, "r");

  // ファイルの内容を1行ずつ読む
  while (($line = fgets($file)) !== false) {
    echo $line . "<br>";
  }

  // ファイルを閉じる
  fclose($file);
} else {
  echo "ファイルが見つかりません。";
}

?>



③ コードの分解と本質解説

fopen($filename, "r")
→ "r" は read（読み取り専用）モード。
他にも "w"（書き込み）、"a"（追記）などがあり、前ステップで学んだ "a" とは逆に、ここでは「読むだけ」。

fgets($file)
→ ファイルから「1行ずつ」読み取る。
読み取りが終わると false を返すので、while ループと組み合わせて最後まで読む。

fclose($file)
→ 開いたファイルは必ず閉じる。
閉じ忘れるとメモリリークやロックが起こることがあります。

file_exists()
→ ファイルが存在しない時にエラーを防ぐ重要なチェック。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

疑問：
isset、empty、file_existsの違いを教えてください



🔍 1. isset()

isset($x)

変数が存在しない → false
変数があるが null → false
変数がある & null ではない → true

つまり：変数の「有無」を確認するもの



🔍 2. empty()

empty($x)

中身が「空」と判断される場合 → true
例：""（空文字）、0、"0"、false、null、未定義、空配列など

つまり：変数が「実質的に中身がない」か確認するもの

※ isset と違って、未定義でもエラーにならずに true を返す点が大きな違い。



🔍 3. file_exists()

file_exists("data.txt")

ファイルまたはディレクトリが存在するなら true
存在しなければ false

変数ではなく「ファイルの有無」を確認するもの

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
疑問：
すみません。
while (($line = fgets($file)) !== false)
←これはどういう意味なんですか？


while (($line = fgets($file)) !== false)
全体の意味は：
ファイルから1行読み取って、まだ読み取れる行があるうちはループを続ける


① fgets($file)

ファイルから 1行 読み取る関数
成功したら、その行（文字列）を返す
読む行がもうない場合 → false を返す


② $line = fgets($file)

読み取った1行を $line という変数に入れる


③ !== false

「まだ読み取れる行があるか？」を判定する条件
!== は 厳密に比較 の意味
"0" と false を間違えて扱わないようにするため


🌀 それを while に組み合わせると…
while (($line = fgets($file)) !== false) {

$line に読む
読む行がまだある → ループ続行
読む行がない（終わった）→ false → ループ終了


「fgets() の結果が false ではないあいだ（＝まだ行が読み取れるあいだ）」

!==falseの意味が
～の結果がfalseではないという事ですね。　＝そういう結果である
書かなくてもいいが、実務では書いておいた方が安全

!== false は「読み取り終了」と「値が0」の違いを正確に見分けるために必要。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

④ 練習問題①（理解確認）

📘 問題：
次のような data.txt ファイルを作成したとします。

りんご
みかん
ぶどう

このファイルを読み込み、各行の前に「果物：」を付けて出力するプログラムを書いてください。
（ファイル名は step35_practice1.php）

あなたの番です。
コードを書いて提示してください。
できたら私が正誤をチェックします。

<?php

$filename = "data.txt";

if (file_exists($filename)) {
  $file = fopen($filename, "r");
}

while (($line = fgets($file))! == false) {
  echo "果物" . $line . "<br>";
}

fclose ($file);
else {
  echo "ファイルが見つかりません。";
}

?>

📝 あなたの提出したコードの問題点

あなたのコードは、書き方の順序と構文が少し崩れています。

❌ 修正ポイント

while の条件が誤記
→ ! == ではなく !==（厳密比較）です

else の位置が文法上不正
→ if ブロックと else はセットで書く必要がある

fclose() は if 内に入れる必要がある
→ ファイルが存在しない場合、変数 $file が存在しないため

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

練習問題修正版：

<?php

$filename = "data.txt";

if (file_exists($filename)) {
  $file = fopen($filename, "r");

while (($line = fgets($file)) !== false) {
  echo "果物 : " . $line . "<br>";
}

fclose ($file);

} else {
  echo "ファイルが見つかりません。";
}

?>

「果物：」と表記を見やすく修正した, その意図はしっかり受け取りました。
コードも正しく動作しています。とても良いです。
丁寧に UI を意識した修正は、実務ではかなり重要です。👍

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

🎯 課題（step35_practice2.php）

data.txt に何行データが入っているか数え、
最後に

合計 X 行です

と表示してください。

🔍 ポイント
行数を数えるには カウンタ変数 を使う
fgets() で 1 行読み込むたびに +1 する


✍️ 書き方の流れ（文章の指示のみ）

$count = 0; を宣言
file_exists() で存在確認
fopen() で "r" モードで開く
while (fgets(...)) の中で $count++
fclose()
echo "合計 {$count} 行です";


😊 では、あなたの番です

ファイル名：step35_practice2.php
ここにコードを書いてください：

<?php

$count = 0;

$filename = "step35_practice2.php";

if (file_exists($filename)) {
  $file = fopen($filename, "r");

  while (($line = fgets($file,count++)) !== false) {
    echo $line "<br>";
  }

  fclose($file);
} else {
  echo "ファイルが見つかりません。";
}

?>

❌ あなたのコードの問題点（3つ）

読み込むファイル名が間違っている
　本来は data.txt を読む必要があります。

fgets($file, count++) になっている
　fgets() の第2引数は「読み込む最大バイト数」であり、
　行数カウントは ループ内で $count++ で行う必要があります。

echo $line "<br>"; が構文エラー
　連結には . が必要です。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

課題修正版：

<?php

$count = 0;

$filename = "data.txt";

if (file_exists($filename)) {
  $file = fopen($filename, "r");

  while (($line = fgets($file)) !== false) {
    $count++;
  }

  fclose($file);

  echo "合計 : " . $count . "行です。";

} else {
  echo "ファイルが見つかりません。";
}

?>

OKです。
行数カウントの処理は正しく書けています。
小さな改善点もなし、完璧です。
では、Step35 最終テスト に進みます。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

🏁 Step35最終テスト（合格するまで進みません）
📄 data.txt（例）
りんご
100
みかん
150
ぶどう
200

🎯 目的
1行ずつ読み込み
果物名 → 価格 の順で組にして
以下のように表示してください：
りんご : 100円
みかん : 150円
ぶどう : 200円


✅ 要件（必ず守る）

ファイルは fopen → fgets → fclose の流れで読むこと

偶数行 / 奇数行で処理を分ける

trim() を使って改行を取り除くこと（ここが本質）

出力形式は "果物名 : 価格円"



✍️ あなたが書くべきコード（step35_final.php）

<?php

$filename = "data.txt";
$count = 0;
$fruit_name = "";

if (file_exists($filename)) {
  $file = fopen($filename, "r");

  while (($line = fgets($file)) !== false) {
    $line = trim($line);
    $count++;
  }

  if ($count %2 !== 0) {
    $fruit_name = $line;
  } else {
    echo $fruit_name . $line . "円<br>";
  }

  fclose($file);
} else {
  echo "ファイルが見つかりません<br>";
}
?>

奇数だと果物だけ、偶数だと果物と元から覚えられている価格の表示

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

疑問：改行除去って何をしているのですか？

trim() の役割
$line = trim($line);

→ 前後の不要な空白・改行（\n / \r / スペース）を削除する

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
