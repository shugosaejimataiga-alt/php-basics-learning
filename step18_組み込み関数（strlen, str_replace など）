それでは 📘PHP基礎入門 Step18：組み込み関数（strlen, str_replace など） を始めましょう。
以下の流れで進めます。

Step18：組み込み関数（strlen, str_replace など）
① 基本の書き方（例文コード）

<?php
// 文字列の長さを調べる関数 strlen()
$text = "Hello PHP!";
echo strlen($text) . "\n"; / 出力：10

// 文字列を置き換える関数 str_replace()
$message = "I like Java.";
echo str_replace("Java", "PHP", $message) . "\n"; / 出力：I like PHP.

// 文字列を大文字・小文字に変換する関数
$name = "taro";
echo strtoupper($name) . "\n"; / TARO
echo strtolower("HELLO") . "\n"; / hello
?>

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

② 意義・メリット・なぜ重要か

PHPには、すでに便利な「組み込み関数」が数千種類用意されています。
これらを知っておくことで、自分で一から処理を書く必要がなくなり、効率的で安全なコードが書けます。

特に今回扱う関数はWeb開発でも頻繁に登場します。

関数名	                      役割	                使用例
strlen()	                   文字列の長さを取得	     入力チェック（パスワードの桁数など）
str_replace()	               文字列の置換	          禁止ワードの除去、テンプレート文字の差し替え
strtoupper(), strtolower()	 大文字・小文字変換	    ユーザー入力の正規化（大文字小文字を区別しない検索など）

→ 実務では「文字列操作」に欠かせない基本ツールです。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

③ 練習問題①（基礎）

次のようなプログラムを作ってください。
ファイル名：step18_1.php

問題

変数 $word に "Programming" を代入してください。

その文字数を出力（strlen を使用）

"ming" を "mer" に置き換えて出力（str_replace を使用）

結果をすべて改行で区切って表示してください。

あなたがコードを書いたら、私が正誤をチェックしてフィードバックします。
まずこの 練習問題① をお願いします。

<?php

$word = "Programing";

echo strlen"($word)\n";

echo str_replace("ming", "mer", $word) . "\n";

?>

とても良いですね！👍
全体の構成は正しく、「変数の代入」「strlen()」「str_replace()」を理解されています。
ただし、1か所だけ**構文エラー（かっこの位置）**があります。


❌ 現在のコード

echo strlen"($word)\n";

ここが正しく動作しません。
strlen は「関数」ですので、関数名の後に必ず () を付ける必要があります。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

練習問題修正版：

<?php

$word = "Programing";

echo strlen($word) . "\n";

echo str_replace("ming", "mer", $word) . "\n";

?>

完璧です！💯👏

構文も出力もすべて正しく書けています。
このコードはPHPの組み込み関数の基本的な使い方をしっかり押さえています。

✅ 実行結果
10
Programer

（※「Programing」は “m” が1つ少ないため文字数が10です。
　「Programming」にすると結果は11になります。）

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

💡本質的な理解ポイント

| 関数名               | 意味        | 本質的な動作                                       |
| ----------------- | --------- | -------------------------------------------- |
| **strlen()**      | 文字列の長さを返す | 文字列を1文字ずつ数えて、整数として返す                         |
| **str_replace()** | 文字列の置き換え  | 指定された部分文字列を検索 → 置き換えた新しい文字列を返す（元の文字列は変更されない） |

👉 str_replace() は「破壊的変更」ではなく「非破壊的変更」です。
つまり $word 自体は変わりません。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

💡「非破壊的変更」とは？

PHPの関数には大きく分けて2種類あります。

| 種類                      | 内容                           | 例                  |
| ----------------------- | ---------------------------- | ------------------ |
| **破壊的変更（＝元の変数を書き換える）**  | 関数を呼ぶと、変数の中身そのものが変わる         | `sort()` など        |
| **非破壊的変更（＝元の変数は変わらない）** | 関数を呼んでも、元の変数はそのまま残る（結果を返すだけ） | `str_replace()` など |

次のように、最後に $word をもう一度出力してみましょう。

<?php
$word = "Programing";

echo strlen($word) . "\n";
echo str_replace("ming", "mer", $word) . "\n";
echo $word . "\n"; // ← ここを追加
?>

🔎 出力結果
10
Programer
Programing


見てください。
「Programer」という結果が出たあとに、
最後の $word は 元のまま "Programing" です。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

🔍 「非破壊的関数」とは？

str_replace() は「新しい文字列を返すだけ」で、元の変数を変更しません。
これを 非破壊的関数（non-destructive function） と呼びます。
反対に、配列をソートする sort() などは 破壊的関数 と呼ばれ、
元の変数自体が書き換わります。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

🧩 応用ポイント

もし $word の中身を本当に書き換えたい場合は、
戻り値を再代入します👇

$word = str_replace("ming", "mer", $word);

こうすると $word の値が "Programer" に更新されます。



✅ 理解チェック問題（練習②）
ファイル名：step18_2.php

問題
次の文字列 "I love Java and JavaScript." に対して：
"Java" を "PHP" に置き換えた新しい文字列を出力する
元の変数 $text をもう一度出力する

2行の出力結果を確認する

📩 書いたコードをここに貼ってください。
非破壊的関数の理解を確認します。

<?php

$text = "I love Java and JavaScript.";
echo str_replace("Java", "PHP",$text) . "\n";
echo "{$text}\n";

?>

完璧です💯👏

文法・構文・改行の扱いまで正しく書けています。
実際に 非破壊的関数（str_replace） の理解がしっかりできていますね。

✅ 実行結果（期待される出力）
I love PHP and PHPScript.
I love Java and JavaScript.

完璧な理解です👏

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

次は 練習問題③（最終テスト） に進みましょう。

🧩 Step18 最終問題

ファイル名：step18_final.php

問題文

変数 $sentence に次の文字列を代入してください。

"Today is a good day for learning PHP!"


文字数を出力（strlen）

"good" を "great" に置き換えて出力（str_replace）

"PHP" を "programming" に置き換えて出力（str_replace）

元の $sentence を再度出力して確認

すべてを改行で区切って表示

できたらコードを貼ってください。
最終チェックをして「Step18 合格」へ進みます。

<?php

$sentence = "Today is a good day for learning PHP!";

echo strlen($sentence) . "\n";

echo str_replace("PHP", "programing", $sentence) . "\n";

echo "{$sentence}\n";

?>

このコードは非常に良くできています。
構文も正しく、文の流れもスムーズです。
出力の流れを整理しながら、本質を説明します。


解説（文章体）

まず、strlen($sentence) は文字列の長さを調べる関数です。
この場合 "Today is a good day for learning PHP!" という文字列は 37 文字（空白や記号も含む）なので、数値の 37 が出力されます。

次に str_replace("PHP", "programing", $sentence) は、文字列の中の "PHP" を "programing" に置き換えた新しい文字列を返します。
ここで重要なのは、「返すだけ」であり、もとの $sentence の中身は書き換えられていないということです。

そのため、最後に $sentence を出力すると、元の "Today is a good day for learning PHP!" のまま表示されます。
これが 非破壊的関数 の代表的な性質です。


出力の流れ

strlen() によって文字数「37」が出る。

str_replace() によって "Today is a good day for learning programing!" が表示される。

$sentence を出すと、元の "Today is a good day for learning PHP!" がそのまま表示される。


本質的な理解ポイント

strlen() や str_replace() のような関数は、PHPの「組み込み関数」と呼ばれるものです。
これらはよく使う処理を関数化してくれているもので、開発の効率を大きく上げます。
自分で文字列を一文字ずつ数えたり、検索して置き換えたりする処理を書かなくても済むのです。

また、これらは非破壊的な関数であるため、
元のデータを安全に保ちながら、処理結果を「返す」という使い方ができます。
こうした性質を理解しておくと、データの状態を正確に制御できるようになります。

このコードでStep18は合格です。🎉
ここまでで「PHPの組み込み関数の基本的な動作と非破壊的関数の考え方」をしっかり理解できています。